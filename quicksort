#include<stdio.h>
#include<stdlib.h>
#define  SIZE 1000
int count=0;

void quicksort(int a[SIZE],int low,int high)
{
int i;
if(low<high)
{
i=partition(a,low,high);
quicksort(a,low,i-1);
quicksort(a,i+1,high);
}
}

void swap(int *a,int *b)
{
int temp;
temp=*a;
*a=*b;
*b=temp;
}

int partition(int a[SIZE],int low,int high)
{
int i,j,pivot;
pivot=a[low];
i=low+1;
j=high;
while(1)
{
while(pivot>=a[i] && i<=high)
{
i++;
count++;
}
while(pivot<a[j])
{
j--;
count++;
}
if(i<j)
swap(&a[i],&a[j]);
else
{
swap(&a[low],&a[j]);
return j;
}
}
}





int main()
{
 int a[SIZE],b[SIZE],n,i,j,c1,c2,c3,c[SIZE];
  printf("number of elements \n");
  scanf("%d",&n);
 
  printf("enter the elements\n");
     for(i=0;i<n;i++)
     scanf("%d",&a[i]);

       quicksort(a,0,n-1);

    printf("\n sorted elements are \n");
  for(i=0;i<n;i++)
    printf(" %d \t",a[i]);
    
     printf("\n the basic operation is executed %d times\n",count);
     printf("\n SIZE	ASC	DES	RAN");
       
  for(i=16;i<1000;i=i*2)
  {
   for(j=1;j<=i;j++)
{
   a[j]=j;
   b[j]=i-j+1;
   c[j]=((rand()%i)+1);
  }
   count=0;
   quicksort(a,1,i);
  c1=count;

  count=0;
quicksort(b,1,i);
c2=count;

count=0;
 quicksort(c,1,i);
c3=count;
printf("\n  %d  \t  %d  \t  %d  \t  %d  \t  \n",i,c1,c2,c3);
}
return 0;

}
